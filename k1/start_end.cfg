[gcode_macro _START_END_PARAMS]
# this value is multiplied by the target temp to give wait time in seconds
variable_bed_warp_wait_multiplier: 8.0
# how far below target temp can the bed be to do fractional wait times
variable_bed_warp_fraction_wait: 0.75
# how long to wait each loop before displaying a status message
variable_bed_warp_wait_interval: 15
# if you want START_PRINT to enable filament sensor and END_PRINT to disable
variable_enable_disable_filament_sensor: True
variable_start_max_velocity: 400
variable_start_max_accel: 10000
variable_carto_touch_retries: 20
variable_carto_touch_samples: 3
# where not using cartotouch what to heat nozzle to just before oozing
variable_start_preheat_nozzle_temp: 150
variable_end_print_cool_down: False
variable_end_print_cool_down_nozzle_temp: 40.0
variable_start_clean_nozzle: False
variable_start_smart_park: True
gcode:

[gcode_macro _CLIENT_VARIABLE]
variable_park_at_cancel   : True  ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_custom_park_dz   : 3.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_use_custom_pos   : False ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 0.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 0.0   ; custom y position; value must be within your defined min and max of Y
variable_retract          : 1.0   ; the value to retract while PAUSE
variable_cancel_retract   : 5.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 35.0  ; retract speed in mm/s
variable_unretract        : 1.0   ; the value to unretract while RESUME
variable_speed_unretract  : 35.0  ; unretract speed in mm/s
variable_speed_hop        : 15.0  ; z move speed in mm/s
variable_speed_move       : 100.0 ; move speed in mm/s
variable_user_pause_macro : "_ON_PAUSE"    ; Everything inside the "" will be executed after the klipper base pause (PAUSE_BASE) function
variable_user_resume_macro: "_ON_RESUME"    ; Everything inside the "" will be executed before the klipper base resume (RESUME_BASE) function
variable_user_cancel_macro: "_ON_CANCEL"    ; Everything inside the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function

gcode:

[virtual_pins]

[output_pin Bed_Warp_Stabilisation]
pin: virtual_pin:BED_WARP_STABILISE_pin
value: 1

[firmware_retraction]
retract_length: 0.6
retract_speed: 30
unretract_extra_length: 0.2
unretract_speed: 30

[idle_timeout]
timeout: 3600
gcode:
    {% if printer.pause_resume.is_paused %}
        RESPOND TYPE=command MSG='Printer is paused, timeout bypassed'
    {% else %}
        RESPOND TYPE=command MSG='Timeout Reached - Turning off heaters and motors'
        TURN_OFF_HEATERS
        M84
    {% endif %}

[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMP=params.BED_TEMP|default(65)|float %}
    {% set EXTRUDER_TEMP=params.EXTRUDER_TEMP|default(230)|float %}
    {% set CARTOGRAPHER_MODEL=params.CARTOGRAPHER_MODEL|default(None) %}
    {% set camera_started = printer["gcode_macro START_CAMERA"].started|default(true) %}
    {% set cartographer = ('cartographer' in printer.configfile.settings) %}
    {% set cartotouch = ('scanner' in printer.configfile.settings and 'touch' == printer.configfile.settings['scanner'].mode|default('touch')) %}
    {% set bed_warp_stabilisation = printer['output_pin Bed_Warp_Stabilisation'].value == 1 %}
    {% set current_bed_temp = printer.heater_bed.temperature %}
    {% set enable_disable_filament_sensor = printer["gcode_macro _START_END_PARAMS"].enable_disable_filament_sensor %}
    {% set start_clean_nozzle = printer["gcode_macro _START_END_PARAMS"].start_clean_nozzle %}
    {% set max_velocity = printer.toolhead.max_velocity %}
    {% set max_accel = printer.toolhead.max_accel %}
    {% set start_max_velocity = [printer["gcode_macro _START_END_PARAMS"].start_max_velocity, max_velocity]|min %}
    {% set start_max_accel = [printer["gcode_macro _START_END_PARAMS"].start_max_accel, max_accel]|min %}
    {% set start_smart_park = printer["gcode_macro _START_END_PARAMS"].start_smart_park|default(false) %}

    {% if cartotouch %}
        {% set preheat_nozzle_temp = printer.configfile.settings['scanner'].scanner_touch_max_temp %}
    {% else %}
        {% set preheat_nozzle_temp = printer["gcode_macro _START_END_PARAMS"].start_preheat_nozzle_temp %}
    {% endif %}

    {% if CARTOGRAPHER_MODEL %}
        CARTOGRAPHER_MODEL_SELECT name="{CARTOGRAPHER_MODEL}"
    {% endif %}

    {% if enable_disable_filament_sensor %}
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
    {% endif %}

    M104 S{preheat_nozzle_temp}  # start heating nozzle but only to just before oozing

    M140 S{BED_TEMP}  # start heating bed dont wait

    {% if cartographer and camera_started %}
        STOP_CAMERA
    {% endif %}

    {% if max_velocity > start_max_velocity or max_accel > start_max_accel %}
    RESPOND TYPE=command MSG='Setting VELOCITY={start_max_velocity} (was {max_velocity}) ACCEL={start_max_accel} (was {max_accel})'
    SET_VELOCITY_LIMIT VELOCITY={start_max_velocity} ACCEL={start_max_accel}
    {% endif %}

    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

    {% if start_clean_nozzle %}
        CLEAN_NOZZLE
    {% endif %}

    {% if printer["gcode_macro _SAF_START_PRINT_AFTER_G28"] != null %}
    _SAF_START_PRINT_AFTER_G28
    {% endif %}

    RESPOND TYPE=command MSG='Waiting for bed temp to reach {BED_TEMP}c'
    M190 S{BED_TEMP}  # wait for bed temperature before next step

    {% if bed_warp_stabilisation %}
       {% if current_bed_temp < (BED_TEMP * 0.99) %}
            _WARP_STABILISE TARGET_TEMP={BED_TEMP} CURRENT_TEMP={current_bed_temp}
        {% else %}
            RESPOND TYPE=command MSG='Skipping bed warp stabilisation as bed already at {current_bed_temp}c'
        {% endif %}
    {% endif %}

    BED_MESH_CLEAR  # clear current mesh
    G4 P500  # wait required to prevent MCU overload / inconsistent meshing

    BED_MESH_CALIBRATE ADAPTIVE=1 ADAPTIVE_MARGIN=5

    {% if cartotouch %}
        {% set carto_touch_retries = printer["gcode_macro _START_END_PARAMS"].carto_touch_retries %}
        {% set carto_touch_samples = printer["gcode_macro _START_END_PARAMS"].carto_touch_samples %}

        RESPOND TYPE=command MSG='Waiting for nozzle temp to reach {preheat_nozzle_temp}c'
        M109 S{preheat_nozzle_temp}
        CARTOGRAPHER_TOUCH RETRIES={carto_touch_retries} SAMPLES={carto_touch_samples}

        # I think this macro alters accel settings so set them back
        SET_VELOCITY_LIMIT VELOCITY={start_max_velocity} ACCEL={start_max_accel}
    {% endif %}

    {% if start_smart_park %}
        SMART_PARK  # park the printhead near the print area
    {% endif %}

    {% if cartographer and camera_started %}
        START_CAMERA
    {% endif %}

    RESPOND TYPE=command MSG='Waiting for nozzle temp to reach {EXTRUDER_TEMP}c'
    M109 S{EXTRUDER_TEMP}  # wait for nozzle temperature before next step
    LINE_PURGE

    {% if max_velocity > start_max_velocity or max_accel > start_max_accel %}
    RESPOND TYPE=command MSG='Restoring VELOCITY={max_velocity} ACCEL={max_accel}'
    SET_VELOCITY_LIMIT VELOCITY={max_velocity} ACCEL={max_accel}
    {% endif %}


[gcode_macro END_PRINT]
gcode:
    {% set bed_warp_stabilisation = printer['output_pin Bed_Warp_Stabilisation'].value == 1 %}
    {% set enable_disable_filament_sensor = printer["gcode_macro _START_END_PARAMS"].enable_disable_filament_sensor %}
    {% set end_print_cool_down = printer["gcode_macro _START_END_PARAMS"].end_print_cool_down %}
    {% set end_print_cool_down_nozzle_temp = printer["gcode_macro _START_END_PARAMS"].end_print_cool_down_nozzle_temp|float %}

    _CLIENT_RETRACT
    {% if bed_warp_stabilisation %}
        RESPOND TYPE=command MSG='Heatbed waiting for next print'
        M104 S0  # Turning off the nozzle
    {% else %}
        TURN_OFF_HEATERS
    {% endif %}

    {% if enable_disable_filament_sensor %}
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
    {% endif %}

    # clear pause_next_layer and pause_at_layer as preparation for next print
    SET_PAUSE_NEXT_LAYER ENABLE=0
    SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
    _TOOLHEAD_PARK_PAUSE_CANCEL
    EASY_GET_POINT
    {% set x_park = printer.toolhead.axis_maximum.x|float - 10.0 %}
    {% set y_park = printer.toolhead.axis_maximum.y/2 %}
    G1 X{x_park} Y{y_park} F5000
    {% if end_print_cool_down %}
        WAIT_TEMP_START
    {% else %}
        TURN_OFF_FANS
    {% endif %}
    M84  # motors off

[gcode_macro EASY_GET_POINT]
gcode:
  {% if "xyz" in printer.toolhead.homed_axes %}
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set z_safe = 0.0 %}
    {% if act_z < (max_z / 2) %}
      {% set z_safe = (max_z / 2) - act_z %}
    {% elif act_z < max_z %}
      {% set z_safe = 2.0 %}
    {% endif %}
    G91
    G1 Z2.0 F600
    G90
    {% if z_safe > 2.0 %}
      G91
      {% set z_safe = z_safe - 2.0 %}
      G1 Z{z_safe} F600
      G90
    {% endif %}
  {% else %}
    {action_respond_info("end print xyz_axes is NULL\n")}
  {% endif %}

[delayed_gcode wait_temp]
# initial_duration: 2.
gcode:
  {% set end_print_cool_down_nozzle_temp = printer["gcode_macro _START_END_PARAMS"].end_print_cool_down_nozzle_temp|float %}
  {% set cur_temp = printer.extruder.temperature %}
  {% if cur_temp|int <= end_print_cool_down_nozzle_temp %}
    WAIT_TEMP_END
  {% else %}
    UPDATE_DELAYED_GCODE ID=wait_temp DURATION=5
  {% endif %}

[gcode_macro WAIT_TEMP_START]
gcode:
  {action_respond_info("wait temp start\n")}
  UPDATE_DELAYED_GCODE ID=wait_temp DURATION=1
  TURN_OFF_HEATERS
  SET_FAN_SPEED FAN=chamber SPEED=0.6
  SET_FAN_SPEED FAN=auxiliary SPEED=0.5
  SET_FAN_SPEED FAN=part SPEED=0.7
  # RESPOND TYPE=command MSG='Waiting for nozzle temp to be below {end_print_cool_down_nozzle_temp}c'
  # TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={end_print_cool_down_nozzle_temp}
  # SET_FAN_SPEED FAN=auxiliary SPEED=0
  # SET_FAN_SPEED FAN=part SPEED=0

[gcode_macro WAIT_TEMP_END]
gcode:
  {action_respond_info("wait temp end\n")}
  UPDATE_DELAYED_GCODE ID=wait_temp DURATION=0
  SET_FAN_SPEED FAN=auxiliary SPEED=0
  SET_FAN_SPEED FAN=part SPEED=0
  TURN_OFF_FANS

[gcode_macro CLEAN_NOZZLE]
variable_start_x: 90
variable_start_y: 224
variable_start_z: 2.0
variable_wipe_dist: 40
variable_wipe_qty: 10
variable_wipe_spd: 200
variable_raise_distance: 15
gcode:
  {% set preheat_nozzle_temp = printer["gcode_macro _START_END_PARAMS"].start_preheat_nozzle_temp %}
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28
  {% endif %}
  {% set prev_x = printer.toolhead.position.x %}
  {% set prev_y = printer.toolhead.position.y %}
  ## Reset max accel and velocity in case it's been overwritten
  SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel}
  ## Move nozzle to start position
  G90
  G1 X{start_x} Y{start_y} F6000
  M109 S{preheat_nozzle_temp}
  ## turn on fans while wiping
  SET_FAN_SPEED FAN=auxiliary SPEED=1
  SET_FAN_SPEED FAN=part SPEED=1
  G1 Z{start_z} F500
  ## Wipe nozzle
  {% for wipes in range(1, (wipe_qty + 1)) %}
    G1 Y{start_y} F{wipe_spd * 60}
    G1 X{start_x + wipe_dist} F{wipe_spd * 60}
    G1 Y{start_y - 1} F{wipe_spd * 60}
    G1 X{start_x} F{wipe_spd * 60}
  {% endfor %}
  ## Raise nozzle
  G1 Z{raise_distance}
  SET_FAN_SPEED FAN=auxiliary SPEED=0
  SET_FAN_SPEED FAN=part SPEED=0
  G1 X{prev_x} Y{prev_y} F6000

[gcode_macro _ON_PAUSE]
gcode:
    {% if printer["gcode_macro _SAF_ON_PAUSE"] != null %}
    _SAF_ON_PAUSE
    {% endif %}


[gcode_macro _ON_RESUME]
gcode:
    {% if printer["gcode_macro _SAF_ON_RESUME"] != null %}
    _SAF_ON_RESUME
    {% endif %}


[gcode_macro _ON_CANCEL]
gcode:
    {% if printer["gcode_macro _SAF_ON_CANCEL"] != null %}
    _SAF_ON_CANCEL
    {% endif %}


[gcode_macro _ON_FILAMENT_RUNOUT]
gcode:
    {% if printer["gcode_macro _SAF_ON_FILAMENT_RUNOUT"] != null %}
    _SAF_ON_FILAMENT_RUNOUT
    {% else %}
    RESPOND TYPE=command MSG='Filament Runout detected.'
    {% endif %}


# Thanks to Zero for this macro
[gcode_macro _WARP_STABILISE]
description: "Performs bed warp stabilisation based on the current bed temperature. Adjusts stabilisation time according to the bed temperature."
gcode:
    {% set multiplier = printer["gcode_macro _START_END_PARAMS"].bed_warp_wait_multiplier|float %}
    {% set interval = printer["gcode_macro _START_END_PARAMS"].bed_warp_wait_interval|int %}
    {% set partial = printer["gcode_macro _START_END_PARAMS"].bed_warp_fraction_wait|float %}

    {% set current_temp = params.CURRENT_TEMP|float %}
    {% set target_temp = params.TARGET_TEMP|float %}

    # if current temp is already pretty high, we only need to do a fraction of heat soaking
    {% if current_temp > (target_temp * partial) %}
        {% set total_time = ((target_temp - current_temp) * multiplier)|int %}
    {% else %}
        # 100c will be 13minutes approx heat time, 65c will be 8.5 minutes preheat, etc.
        {% set total_time = (target_temp * multiplier)|int %}
    {% endif %}

    RESPOND TYPE=command MSG='Bed Warp Stabilisation starting with a total time of {total_time} seconds...'
    
    {% set loops = (total_time / interval)|int %}   
    {% for i in range(loops) %}
      {% set time_remaining = total_time - (i + 1) * interval %}
      RESPOND TYPE=command MSG='Bed Warp Stabilization { time_remaining } seconds remaining'
      {% if time_remaining < interval %}
        G4 P{ time_remaining * 1000 }  # Wait for the interval time in milliseconds
      {% else %}
        G4 P{ interval * 1000 }  # Wait for the interval time in milliseconds
      {% endif %}
    {% endfor %}

    RESPOND TYPE=command MSG='Warp Stabilisation complete!'
